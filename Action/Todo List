Todo:
[x] Completed [-] Removed/deprecated [*] Recursive [?] Unclear or Maybe [+] Add or Enhance
[&] Merge [!] Research [=] Same As [ ] UnAssigned [WIP] Current Work [TODO] Todo ASAP

[x] Setup Obs & Connect to Twitch 
[*] Do daily Twitch Streaming
[x] Create a cool wall paper for Twitch Channel
[*] Show old implementation demo - if Anyone asks
[x] Work on CoreWindow and EguiWindow
[x] Make application run without loading any plugins
[x] How to build individual plugins - WindowPlugin - create [dylib], dll, dso - tested on Mac Only
[x] Fix WindowPlugin to load as plugin
[x] Make application load dynamic library plugin - WindowPlugin
[x] Change Plugins to Strict API Plugins

[WIP] Refactor Message struct for Dynamic Controller Plugins
[WIP] WindowController plugins
[TODO] Git Commit
[ ] Refactor Plugin_system.rs
[ ] Refactor Message Bus System  
[ ] Fix UIController Plugin
[ ] Refactor UIController Plugin to work with the new dynamic plugin_system.rs
[ ] 

[ ] Add Drag & Drop code in Frame.rs
[ ] Complete Window Messages and Responses
[ ] Prompting system - closing window (Y/N)
[ ] Window.rs - Add layout
[ ] Window.rs - Render Frame in a specific part of the layout
[ ] Test dynamic plugin hot reloading
[ ] 
[ ] 
[ ] 
[ ] 

Keep this intro here:

Hi there!

 This is a new channel please follow and hang around to help me improve. I am currently learning Rust by porting my application from Haxe.

----------
/Tauri-Eframe-Native-App-Toolkit
├── app_core
│   ├── src
│   │   ├── lib.rs
│   │   ├── ui.rs
│   │   ├── message_bus.rs
│   │   ├── plugin_system.rs
│   │   └── app.rs
│   └── Cargo.toml
├── app_main
│   ├── src
│   │   ├── lib.rs
│   │   └── main.rs
│   └── Cargo.toml
├── egui_impl
│   ├── src
│   │   ├── lib.rs
│   │   ├── components.rs
│   │   └── components
│   │       ├── frame.rs
│   │       └── window.rs
│   └── Cargo.toml
├── src-tauri
│   ├── src
│   │   └── main.rs
│   ├── Cargo.toml
│   └── tauri.conf.json
├── assets
│   ├── expand.png
│   └── collapse.png
├── Cargo.toml
└── plugins.txt


Welcome and feel free to ask any questions. 

I am building a toolkit to enable people build high performing desktop applications easily.

Thanks for following.

I am building a toolkit to enable people build high performing desktop applications easily.

For your DAW-like application, you could further extend this by:
Using a thread pool for managing multiple background tasks
Implementing priority queues for different types of messages (e.g., audio processing vs. UI updates)
Adding a mechanism to cancel or modify ongoing background tasks as needed
This combined 
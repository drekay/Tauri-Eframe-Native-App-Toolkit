use tauri::{
    plugin::{Builder, TauriPlugin},
    Manager, Runtime, State,
};
use serde::{Serialize, Deserialize};
use std::sync::Mutex;

// Define the plugin's state
struct AboutWindowState {
    windows: Vec<WindowInfo>,
    about_counter: usize,
    expanded_height: f32,
    collapsed_height: f32,
    gap_height: f32,
    dragged_window: Option<DraggedWindow>,
}

#[derive(Clone, Serialize, Deserialize)]
struct WindowInfo {
    id: usize,
    title: String,
    content: String,
    size: (f32, f32),
    collapsed: bool,
}

#[derive(Clone, Serialize, Deserialize)]
struct DraggedWindow {
    index: usize,
    start_pos: (f32, f32),
    current_pos: (f32, f32),
}

// Plugin command handlers
#[tauri::command]
fn add_about_window(state: State<'_, Mutex<AboutWindowState>>) -> Result<(), String> {
    let mut state = state.lock().map_err(|_| "Failed to lock state".to_string())?;
    let new_id = state.about_counter + 1;
    let new_window = WindowInfo {
        id: new_id,
        title: format!("About{}", new_id),
        content: format!("This is About window #{}.\nThis is a Tauri app using EGUI with a neon rotary button!", new_id),
        size: (400.0, 100.0),
        collapsed: false,
    };
    state.about_counter = new_id;
    state.windows.push(new_window);
    Ok(())
}

#[tauri::command]
fn collapse_window(window_id: usize, state: State<'_, Mutex<AboutWindowState>>) -> Result<(), String> {
    let mut state = state.lock().map_err(|_| "Failed to lock state".to_string())?;
    if let Some(window) = state.windows.iter_mut().find(|w| w.id == window_id) {
        window.collapsed = !window.collapsed;
    }
    Ok(())
}

#[tauri::command]
fn drag_window_start(window_id: usize, pos: (f32, f32), state: State<'_, Mutex<AboutWindowState>>) -> Result<(), String> {
    let mut state = state.lock().map_err(|_| "Failed to lock state".to_string())?;
    let index = state.windows.iter().position(|w| w.id == window_id).ok_or("Window not found")?;
    state.dragged_window = Some(DraggedWindow {
        index,
        start_pos: pos,
        current_pos: pos,
    });
    Ok(())
}

#[tauri::command]
fn drag_window_move(pos: (f32, f32), state: State<'_, Mutex<AboutWindowState>>) -> Result<(), String> {
    let mut state = state.lock().map_err(|_| "Failed to lock state".to_string())?;
    if let Some(ref mut dragged) = state.dragged_window {
        dragged.current_pos = pos;
    }
    Ok(())
}

#[tauri::command]
fn drag_window_end(state: State<'_, Mutex<AboutWindowState>>) -> Result<(), String> {
    let mut state = state.lock().map_err(|_| "Failed to lock state".to_string())?;
    if let Some(dragged) = state.dragged_window.take() {
        let mut cumulative_height = 0.0;
        let new_index = state.windows.iter().position(|window| {
            cumulative_height += if window.collapsed {
                state.collapsed_height + state.gap_height
            } else {
                state.expanded_height
            };
            dragged.current_pos.1 < 10.0 + cumulative_height
        }).unwrap_or_else(|| state.windows.len().saturating_sub(1));

        if new_index != dragged.index {
            let window = state.windows.remove(dragged.index);
            state.windows.insert(new_index, window);
        }
    }
    Ok(())
}

// Function to create and initialize the plugin
pub fn init<R: Runtime>() -> TauriPlugin<R> {
    Builder::new("about_window")
        .setup(|app_handle, _api| {
            let var_name = AboutWindowState {
                windows: Vec::new(),
                about_counter: 0,
                expanded_height: 110.0,
                collapsed_height: 40.0,
                gap_height: 64.0,
                dragged_window: None,
            };
            app_handle.manage(Mutex::new(var_name));
            Ok(())
        })
        .invoke_handler(tauri::generate_handler![
            add_about_window,
            collapse_window,
            drag_window_start,
            drag_window_move,
            drag_window_end
        ])
        .build()
}